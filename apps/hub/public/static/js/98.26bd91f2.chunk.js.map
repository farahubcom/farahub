{"version":3,"file":"static/js/98.26bd91f2.chunk.js","mappings":"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","sources":["modules/invoices-commissions/pages/EmployeesIncomeReport/DataTable.js","modules/invoices-commissions/pages/EmployeesIncomeReport/Main.js"],"sourcesContent":["import { Box, ListItem, ListItemText } from \"@mui/material\";\r\nimport sortBy from \"lodash/sortBy\";\r\nimport { useState } from \"react\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport ResponsiveTable from \"../../../../components/ResponsiveTable\";\r\nimport Text from \"../../../../components/Text\";\r\nimport pricify from \"../../../../utils/pricify\";\r\nimport useAfterFirstRender from \"../../../../utils/useAfterFirstRender\";\r\nimport useGetRowNumber from \"../../../../utils/useGetRowNumber\";\r\n\r\n\r\nconst DataTable = ({ loading, data, meta, infiniteScrollProps, }) => {\r\n    const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n    const [sort, setSort] = useState(\r\n        searchParams.has('sort') ? searchParams.get('sort') : '-createdAt'\r\n    );\r\n\r\n    useAfterFirstRender(() => {\r\n        setSearchParams({\r\n            ...Object.fromEntries(searchParams),\r\n            sort\r\n        })\r\n    }, [sort]);\r\n\r\n    const getRowNumber = useGetRowNumber();\r\n\r\n\r\n    return (\r\n        <>\r\n            <ResponsiveTable\r\n                data={data}\r\n                loading={loading}\r\n                infiniteScrollProps={infiniteScrollProps}\r\n                definitions={sortBy([\r\n                    {\r\n                        title: 'ردیف',\r\n                        headerCellProps: {\r\n                            align: \"center\"\r\n                        },\r\n                        rowCellProps: {\r\n                            align: \"center\",\r\n                            width: 100\r\n                        },\r\n                        renderCell: (row, index) => <Text>{getRowNumber(index)}</Text>,\r\n                        priority: 100\r\n                    }, {\r\n                        field: 'code',\r\n                        title: 'کد کارمند',\r\n                        headerCellProps: {\r\n                            align: \"center\"\r\n                        },\r\n                        rowCellProps: {\r\n                            align: \"center\",\r\n                            width: 100\r\n                        },\r\n                        render: row => <Text>{row.code}</Text> || '-',\r\n                        priority: 200\r\n                    }, {\r\n                        title: 'نام کارمند',\r\n                        rowCellProps: {\r\n                            width: 400\r\n                        },\r\n                        renderCell: row => (\r\n                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                                {/* <Avatar\r\n                                    sx={{ width: 30, height: 30, fontSize: '1.15em', mr: 1 }}\r\n                                    src={row.avatar}\r\n                                /> */}\r\n                                <strong><Text>{[row.firstName, row.lastName].join(' ')}</Text></strong>\r\n                            </Box>\r\n                        ),\r\n                        priority: 300\r\n                    }, {\r\n                        title: 'دفعات ارائه خدمت',\r\n                        headerCellProps: {\r\n                            align: \"center\"\r\n                        },\r\n                        rowCellProps: {\r\n                            align: \"center\",\r\n                            width: 200\r\n                        },\r\n                        renderCell: row => Intl.NumberFormat().format(row.totalServices),\r\n                        priority: 400\r\n                    }, {\r\n                        title: <>مجموع درآمد <small>(ریال)</small></>,\r\n                        headerCellProps: {\r\n                            align: \"center\"\r\n                        },\r\n                        rowCellProps: {\r\n                            align: \"center\",\r\n                            width: 250\r\n                        },\r\n                        renderCell: row => pricify(row.totalIncome),\r\n                        priority: 500\r\n                    }\r\n                ], o => o.priority)}\r\n                renderSheetTitle={row => <Text>{[row.firstName, row.lastName].join(' ')}</Text>}\r\n                renderListItemChildren={(row) => (\r\n                    <ListItem>\r\n                        {/* <ListItemAvatar>\r\n                            <Avatar src={row.avatar} />\r\n                        </ListItemAvatar> */}\r\n                        <ListItemText\r\n                            primary={<strong>{[row.firstName, row.lastName].join(' ')}</strong>}\r\n                        // secondary={row.roles && row.roles.length > 0 ? <Text>{row.roles.map(r => r.name).join(', ')}</Text> : '-'}\r\n                        />\r\n                    </ListItem>\r\n                )}\r\n\r\n                tableRowProps={row => ({\r\n                    hover: true,\r\n                    striped: true,\r\n                })}\r\n\r\n                paginationProps={{\r\n                    count: meta.total,\r\n                    rowsPerPage: searchParams.get('perPage') || 25,\r\n                    page: searchParams.get('page') || 0,\r\n                    onPageChange: (e, page) => setSearchParams({ ...Object.fromEntries([...searchParams]), page }),\r\n                    onRowsPerPageChange: e => setSearchParams({ ...Object.fromEntries([...searchParams]), perPage: e.target.value })\r\n                }}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DataTable","import { Card } from \"@mui/material\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport { useMiddleware, useTask } from \"../../../../Application\";\r\nimport ResponsiveContainer from \"../../../../components/ResponsiveContainer\";\r\nimport { TabView } from \"../../../../tabs\";\r\nimport useResponsiveTableFetch from \"../../../../utils/useResponsiveTableFetch\";\r\nimport DataTable from \"./DataTable\";\r\n\r\n\r\nconst EmployeesIncomeReport = () => {\r\n    const middleware = useMiddleware('Invoices-Commissions.Reports');\r\n\r\n    const [searchParams] = useSearchParams();\r\n\r\n    const { data, total, loading, loadMore, reload } = useResponsiveTableFetch({\r\n        handleFetch: params => middleware.employeesIncome({\r\n            ...params,\r\n            ...Object.fromEntries([...searchParams])\r\n        }),\r\n        loadDeps: [searchParams],\r\n        infiniteScrollDefaultParams: {\r\n            page: searchParams.has('page') ? searchParams.get('page') : 0,\r\n            perPage: searchParams.has('perPage') ? searchParams.get('perPage') : 25,\r\n        }\r\n    })\r\n\r\n    const task = useTask('Invoices-Commissions.employeesIncomeReport');\r\n\r\n\r\n    return (\r\n        <TabView {...task}>\r\n            <ResponsiveContainer>\r\n                <Card variant=\"outlined\" sx={{ flexGrow: 1 }}>\r\n                    {/* <FilterForm /> */}\r\n                    {/* <Divider /> */}\r\n                    <DataTable\r\n                        data={data}\r\n                        loading={loading}\r\n                        meta={{ total }}\r\n                        infiniteScrollProps={{\r\n                            loading: false,\r\n                            hasNextPage: data.length < total,\r\n                            onLoadMore: loadMore\r\n                        }}\r\n                    />\r\n                </Card>\r\n            </ResponsiveContainer>\r\n        </TabView>\r\n    )\r\n}\r\n\r\n\r\nexport default EmployeesIncomeReport"],"names":["DataTable","loading","data","meta","infiniteScrollProps","searchParams","setSearchParams","useSearchParams","sort","setSort","useState","has","get","useAfterFirstRender","Object","fromEntries","getRowNumber","useGetRowNumber","_jsx","_Fragment","children","ResponsiveTable","definitions","sortBy","title","headerCellProps","align","rowCellProps","width","renderCell","row","index","Text","priority","field","render","code","Box","sx","display","alignItems","firstName","lastName","join","Intl","NumberFormat","format","totalServices","_jsxs","pricify","totalIncome","o","renderSheetTitle","renderListItemChildren","ListItem","ListItemText","primary","tableRowProps","hover","striped","paginationProps","count","total","rowsPerPage","page","onPageChange","e","onRowsPerPageChange","perPage","target","value","EmployeesIncomeReport","middleware","useMiddleware","loadMore","reload","useResponsiveTableFetch","handleFetch","params","employeesIncome","loadDeps","infiniteScrollDefaultParams","task","useTask","TabView","ResponsiveContainer","Card","variant","flexGrow","hasNextPage","length","onLoadMore"],"sourceRoot":""}