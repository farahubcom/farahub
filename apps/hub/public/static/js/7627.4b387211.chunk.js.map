{"version":3,"file":"static/js/7627.4b387211.chunk.js","mappings":"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","sources":["../node_modules/react-hook-roulette/dist/index.mjs","modules/customers-club/pages/WheelForm/Form.js","modules/customers-club/pages/WheelForm/Main.js"],"sourcesContent":["import * as React from 'react';\nimport { useMemo, useRef, useState, useCallback, useEffect } from 'react';\n\nconst Roulette = ({\n  roulette\n}) => {\n  const { size } = roulette;\n  return /* @__PURE__ */ React.createElement(\"canvas\", { ref: roulette.canvasRef, width: size, height: size });\n};\n\nconst defaultOptions = {\n  size: 400,\n  maxSpeed: 100,\n  rotationDirection: \"clockwise\",\n  acceleration: 1,\n  deceleration: 1,\n  initialAngle: 0,\n  determineAngle: 45,\n  showArrow: true,\n  style: {\n    canvas: {\n      bg: \"#fff\"\n    },\n    arrow: {\n      bg: \"#000\",\n      size: 16\n    },\n    label: {\n      font: \"16px Arial\",\n      align: \"right\",\n      baseline: \"middle\",\n      offset: 0.75,\n      defaultColor: \"#000\"\n    },\n    pie: {\n      border: false,\n      borderColor: \"#000\",\n      borderWidth: 2,\n      theme: [\n        {\n          bg: \"#e0e7ff\"\n        },\n        {\n          bg: \"#a5b4fc\"\n        },\n        {\n          bg: \"#6366f1\",\n          color: \"#fff\"\n        },\n        {\n          bg: \"#4338ca\",\n          color: \"#fff\"\n        }\n      ]\n    }\n  }\n};\n\nconst degreesToCanvasRadians = (degrees) => {\n  return (360 - degrees) * Math.PI / 180;\n};\nconst calculateLabelPosition = ({\n  geometry,\n  segmentStartAngle,\n  anglePerSegment,\n  labelOffset\n}) => {\n  const startDeg = degreesToCanvasRadians(segmentStartAngle);\n  const endDeg = degreesToCanvasRadians(segmentStartAngle + anglePerSegment);\n  const labelRadius = geometry.radius * labelOffset;\n  const labelAngle = startDeg + (endDeg - startDeg) / 2;\n  const labelX = geometry.center.x + labelRadius * Math.cos(labelAngle);\n  const labelY = geometry.center.y + labelRadius * Math.sin(labelAngle);\n  return {\n    labelX,\n    labelY,\n    labelAngle\n  };\n};\nconst createCalculateTotalWeight = () => {\n  let lastPieList = null;\n  let lastTotalWeight = 0;\n  return (pieList) => {\n    if (lastPieList === pieList) {\n      return lastTotalWeight;\n    }\n    const totalWeight = pieList.reduce(\n      (acc, pie) => acc + (pie.weight || 1),\n      0\n    );\n    lastPieList = pieList;\n    lastTotalWeight = totalWeight;\n    return totalWeight;\n  };\n};\nconst calculateTotalWeight = createCalculateTotalWeight();\nconst getResultName = ({\n  rouletteItemList,\n  totalRotation,\n  rotationDirection\n}) => {\n  const checkDegree = Math.abs(totalRotation) % 360;\n  const normalizedRotation = checkDegree > 360 ? checkDegree - 360 : checkDegree;\n  const totalWeight = calculateTotalWeight(rouletteItemList);\n  const directionResolvedData = rotationDirection === \"clockwise\" ? [...rouletteItemList].reverse() : rouletteItemList;\n  let currentAngle = 0;\n  for (const item of directionResolvedData) {\n    const itemWeight = item.weight || 1;\n    const itemAngle = itemWeight / totalWeight * 360;\n    if (normalizedRotation >= currentAngle && normalizedRotation < currentAngle + itemAngle) {\n      return item.name;\n    }\n    currentAngle += itemAngle;\n  }\n  return \"No Result\";\n};\nconst setupCanvas = (canvas) => {\n  if (!canvas)\n    throw new Error(\"Canvas is not available.\");\n  const context = canvas.getContext(\"2d\");\n  if (!context)\n    throw new Error(\"Could not obtain 2D context from canvas.\");\n  return {\n    canvas,\n    context\n  };\n};\n\nconst drawArrow = ({\n  context,\n  geometry,\n  determineAngle,\n  style\n}) => {\n  const radian = degreesToCanvasRadians(determineAngle);\n  const arrowTipX = geometry.center.x + geometry.radius * Math.cos(radian);\n  const arrowTipY = geometry.center.y + geometry.radius * Math.sin(radian);\n  const dimension = style.arrow.size;\n  const baseCenterX = arrowTipX - dimension * Math.cos(radian);\n  const baseCenterY = arrowTipY - dimension * Math.sin(radian);\n  const leftX = baseCenterX + dimension * Math.sin(radian);\n  const leftY = baseCenterY - dimension * Math.cos(radian);\n  const rightX = baseCenterX - dimension * Math.sin(radian);\n  const rightY = baseCenterY + dimension * Math.cos(radian);\n  context.beginPath();\n  context.moveTo(arrowTipX, arrowTipY);\n  context.lineTo(leftX, leftY);\n  context.lineTo(rightX, rightY);\n  context.closePath();\n  context.fillStyle = style.arrow.bg;\n  context.fill();\n};\nconst drawPieLabel = ({\n  context,\n  geometry,\n  pie,\n  segmentStartAngle,\n  anglePerSegment,\n  style\n}) => {\n  const { labelX, labelY, labelAngle } = calculateLabelPosition({\n    geometry,\n    segmentStartAngle,\n    anglePerSegment,\n    labelOffset: style.label.offset\n  });\n  context.save();\n  context.translate(labelX, labelY);\n  context.rotate(labelAngle);\n  context.textAlign = style.label.align;\n  context.textBaseline = style.label.baseline;\n  context.fillStyle = pie.color;\n  context.font = style.label.font;\n  context.fillText(pie.name, 0, 0);\n  context.restore();\n};\nconst drawPie = ({\n  context,\n  geometry,\n  pie,\n  segmentStartAngle,\n  anglePerSegment,\n  style\n}) => {\n  const startDeg = degreesToCanvasRadians(segmentStartAngle);\n  const endDeg = degreesToCanvasRadians(segmentStartAngle + anglePerSegment);\n  context.beginPath();\n  context.moveTo(geometry.center.x, geometry.center.y);\n  context.fillStyle = pie.bg;\n  context.arc(\n    geometry.center.x,\n    geometry.center.y,\n    geometry.radius,\n    startDeg,\n    endDeg,\n    true\n  );\n  context.fill();\n  if (style?.pie?.border === false || style?.pie?.borderWidth == null || style?.pie?.borderColor == null) {\n    return;\n  }\n  context.beginPath();\n  context.strokeStyle = style.pie.borderColor;\n  context.lineWidth = style.pie.borderWidth;\n  context.moveTo(geometry.center.x, geometry.center.y);\n  context.lineTo(\n    geometry.center.x + geometry.radius * Math.cos(startDeg),\n    geometry.center.y + geometry.radius * Math.sin(startDeg)\n  );\n  context.moveTo(geometry.center.x, geometry.center.y);\n  context.lineTo(\n    geometry.center.x + geometry.radius * Math.cos(endDeg),\n    geometry.center.y + geometry.radius * Math.sin(endDeg)\n  );\n  context.stroke();\n};\nconst drawRoulette = ({\n  initialAngleOffset,\n  context,\n  startAngle,\n  geometry,\n  pieList,\n  style\n}) => {\n  const weightCount = calculateTotalWeight(pieList);\n  const anglePerWeight = 360 / weightCount;\n  let segmentEndAngle = initialAngleOffset % 360 + startAngle;\n  const resolvedPieList = pieList.map((pie, index) => {\n    const bg = pie.bg || style.pie.theme[index % style.pie.theme.length].bg;\n    const color = pie.color || style.pie.theme[index % style.pie.theme.length].color || style.label.defaultColor;\n    const weight = pie.weight || 1;\n    const anglePerSegment = anglePerWeight * weight;\n    return {\n      name: pie.name,\n      bg,\n      color,\n      weight,\n      anglePerWeight,\n      anglePerSegment\n    };\n  });\n  for (const pie of resolvedPieList) {\n    const anglePerSegment = anglePerWeight * pie.weight;\n    const segmentStartAngle = (segmentEndAngle - anglePerSegment + 360) % 360;\n    drawPie({\n      context,\n      geometry,\n      pie,\n      segmentStartAngle,\n      anglePerSegment,\n      style\n    });\n    drawPieLabel({\n      context,\n      geometry,\n      pie,\n      segmentStartAngle,\n      anglePerSegment,\n      style\n    });\n    segmentEndAngle = segmentStartAngle;\n  }\n  if (style?.pie?.border === false || style?.pie?.borderWidth == null || style?.pie?.borderColor == null) {\n    return;\n  }\n  const lineWidth = style.pie.borderWidth;\n  context.beginPath();\n  context.strokeStyle = style.pie.borderColor;\n  context.lineWidth = lineWidth;\n  context.arc(\n    geometry.center.x,\n    geometry.center.y,\n    geometry.radius - lineWidth / 2,\n    0,\n    Math.PI * 2,\n    true\n  );\n  context.stroke();\n};\nconst drawCanvas = ({\n  rouletteItemList,\n  mergedOptions,\n  context,\n  geometry,\n  rouletteRef\n}) => {\n  context.beginPath();\n  context.fillStyle = mergedOptions.style.canvas.bg;\n  context.fillRect(0, 0, geometry.radius * 2, geometry.radius * 2);\n  drawRoulette({\n    pieList: rouletteItemList,\n    initialAngleOffset: rouletteRef.current.totalRotation,\n    startAngle: mergedOptions.determineAngle,\n    style: mergedOptions.style,\n    context,\n    geometry\n  });\n  if (mergedOptions.showArrow) {\n    drawArrow({\n      context,\n      style: mergedOptions.style,\n      geometry,\n      determineAngle: mergedOptions.determineAngle\n    });\n  }\n};\n\nconst calculateSpeed = (status, curSpeed, options) => {\n  if (status === \"running\" && curSpeed <= options.maxSpeed) {\n    return curSpeed + options.acceleration;\n  }\n  if (status === \"ending\" && curSpeed >= 0) {\n    return curSpeed - options.deceleration;\n  }\n  return curSpeed;\n};\nconst calcTotalRotation = (rotationDirection) => {\n  if (rotationDirection === \"clockwise\") {\n    return (totalRotation, curSpeed) => {\n      return totalRotation - curSpeed;\n    };\n  }\n  return (totalRotation, curSpeed) => {\n    return totalRotation + curSpeed;\n  };\n};\nconst animateRoulette = ({\n  rouletteItemList,\n  mergedOptions,\n  context,\n  status,\n  geometry,\n  rouletteRef,\n  onFinish\n}) => {\n  let animationFrameId;\n  let curSpeed = rouletteRef.current.speed;\n  const getTotalRotation = calcTotalRotation(mergedOptions.rotationDirection);\n  const animate = () => {\n    curSpeed = calculateSpeed(status, curSpeed, mergedOptions);\n    rouletteRef.current.speed = curSpeed;\n    rouletteRef.current.totalRotation = getTotalRotation(\n      rouletteRef.current.totalRotation,\n      curSpeed\n    );\n    const complete = status === \"ending\" && curSpeed < 0;\n    if (complete) {\n      const rouletteResult = getResultName({\n        rouletteItemList,\n        rotationDirection: mergedOptions.rotationDirection,\n        totalRotation: rouletteRef.current.totalRotation\n      });\n      onFinish(rouletteResult);\n      return;\n    }\n    drawCanvas({\n      rouletteItemList,\n      mergedOptions,\n      context,\n      geometry,\n      rouletteRef\n    });\n    animationFrameId = requestAnimationFrame(animate);\n  };\n  animate();\n  return () => cancelAnimationFrame(animationFrameId);\n};\n\nconst useRoulette = ({\n  items,\n  onSpinUp,\n  onSpinDown,\n  onSpinEnd,\n  options = {}\n}) => {\n  const mergedOptions = useMemo(() => {\n    return {\n      ...defaultOptions,\n      ...options,\n      style: {\n        canvas: {\n          ...defaultOptions.style.canvas,\n          ...options.style?.canvas\n        },\n        label: {\n          ...defaultOptions.style.label,\n          ...options.style?.label\n        },\n        arrow: {\n          ...defaultOptions.style.arrow,\n          ...options.style?.arrow\n        },\n        pie: {\n          ...defaultOptions.style.pie,\n          ...options.style?.pie,\n          theme: [\n            ...options.style?.pie?.theme || defaultOptions.style.pie.theme\n          ]\n        }\n      }\n    };\n  }, [options]);\n  const canvasRef = useRef(null);\n  const rouletteRef = useRef({\n    speed: 0,\n    totalRotation: mergedOptions.initialAngle\n  });\n  const resultRef = useRef(\"\");\n  const geometry = useMemo(() => {\n    const half = mergedOptions.size / 2;\n    return {\n      radius: half,\n      center: {\n        x: half,\n        y: half\n      }\n    };\n  }, [mergedOptions]);\n  const [status, setStatus] = useState(\"stop\");\n  const onStart = useCallback(() => {\n    if (status !== \"stop\")\n      return;\n    setStatus(\"running\");\n  }, [status]);\n  const onStop = useCallback(() => {\n    if (status !== \"running\")\n      return;\n    setStatus(\"ending\");\n  }, [status]);\n  useEffect(() => {\n    if (status !== \"stop\")\n      return;\n    const { context } = setupCanvas(canvasRef.current);\n    drawCanvas({\n      rouletteItemList: items,\n      mergedOptions,\n      context,\n      geometry,\n      rouletteRef\n    });\n  }, [status, geometry, items, mergedOptions]);\n  useEffect(() => {\n    if (status !== \"running\" && status !== \"ending\")\n      return;\n    if (status === \"running\") {\n      onSpinUp?.();\n    }\n    if (status === \"ending\") {\n      onSpinDown?.();\n    }\n    const { context } = setupCanvas(canvasRef.current);\n    const cancelAnimation = animateRoulette({\n      rouletteItemList: items,\n      mergedOptions,\n      context,\n      status,\n      geometry,\n      rouletteRef,\n      onFinish: (rouletteResult) => {\n        setStatus(\"stop\");\n        resultRef.current = rouletteResult;\n        onSpinEnd?.(rouletteResult);\n      }\n    });\n    return () => {\n      cancelAnimation();\n    };\n  }, [status, geometry, items, mergedOptions, onSpinEnd, onSpinDown, onSpinUp]);\n  return {\n    roulette: {\n      size: mergedOptions.size,\n      canvasRef\n    },\n    result: resultRef.current,\n    onStart,\n    onStop\n  };\n};\n\nexport { Roulette, useRoulette };\n","import { Box } from \"@mui/material\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useMiddleware } from \"../../../../Application\";\r\n\r\nimport { Roulette, useRoulette } from \"react-hook-roulette\";\r\n\r\nconst DirectForm = () => {\r\n    const { t } = useTranslation([\"customers-club\", \"global\"]);\r\n\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    const middleware = useMiddleware(\"Customers-Club.Welcome\");\r\n\r\n    const items = [\r\n        { name: \"خرید خونه\" },\r\n        { name: \"label2\" },\r\n        { name: \"label3\" },\r\n        { name: \"label4\" },\r\n        { name: \"label5\" },\r\n        { name: \"label6\" },\r\n    ];\r\n\r\n    const { roulette, onStart, onStop, result } = useRoulette({ items, options: {\r\n        style: {\r\n            label: {\r\n                font: 'inherit'\r\n            }\r\n        }\r\n    } });\r\n\r\n    return (\r\n        <Box>\r\n            <Box sx={{ mb: 2 }}>\r\n                <Roulette roulette={roulette} />\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default DirectForm;\r\n","import { Alert, Card, CardContent, Grid, styled } from \"@mui/material\";\r\nimport DOMPurify from \"dompurify\";\r\nimport Markdown from \"marked-react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { useTask } from \"../../../../Application\";\r\nimport ResponsiveContainer from \"../../../../components/ResponsiveContainer\";\r\nimport { TabView } from \"../../../../tabs\";\r\nimport Form from \"./Form\";\r\n\r\nconst MarkdownContainer = styled(\"div\")(({ theme }) => ({\r\n    \"& h3\": {\r\n        marginTop: 0,\r\n    },\r\n}));\r\n\r\nconst Page = () => {\r\n\r\n    const { t } = useTranslation(\"customers-club\");\r\n\r\n    const task = useTask('Customers-Club.wheel');\r\n\r\n    const GUIDE = `\r\n### نکات آموزشی\r\n    `;\r\n\r\n    return (\r\n        <TabView {...task}>\r\n            <ResponsiveContainer>\r\n                <Card variant=\"outlined\" sx={{ mb: 3 }}>\r\n                    <CardContent sx={{ p: 3 }}>\r\n                        <Grid container spacing={5}>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <Alert color=\"info\" severity=\"info\">\r\n                                    <MarkdownContainer>\r\n                                        <Markdown breaks={true}>\r\n                                            {DOMPurify.sanitize(GUIDE)}\r\n                                        </Markdown>\r\n                                    </MarkdownContainer>\r\n                                </Alert>\r\n                            </Grid>\r\n                            <Grid item xs={12} md={6}>\r\n                                <Form />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                </Card>\r\n            </ResponsiveContainer>\r\n        </TabView>\r\n    )\r\n}\r\n\r\n\r\nexport default Page;"],"names":["Roulette","roulette","size","React","ref","canvasRef","width","height","defaultOptions","maxSpeed","rotationDirection","acceleration","deceleration","initialAngle","determineAngle","showArrow","style","canvas","bg","arrow","label","font","align","baseline","offset","defaultColor","pie","border","borderColor","borderWidth","theme","color","degreesToCanvasRadians","degrees","Math","PI","calculateTotalWeight","createCalculateTotalWeight","lastPieList","lastTotalWeight","pieList","totalWeight","reduce","acc","weight","setupCanvas","Error","context","getContext","drawPieLabel","geometry","segmentStartAngle","anglePerSegment","labelX","labelY","labelAngle","calculateLabelPosition","labelOffset","startDeg","endDeg","labelRadius","radius","center","x","cos","y","sin","save","translate","rotate","textAlign","textBaseline","fillStyle","fillText","name","restore","drawPie","beginPath","moveTo","arc","fill","strokeStyle","lineWidth","lineTo","stroke","drawCanvas","rouletteItemList","mergedOptions","rouletteRef","fillRect","drawRoulette","initialAngleOffset","startAngle","anglePerWeight","segmentEndAngle","resolvedPieList","map","index","length","current","totalRotation","drawArrow","radian","arrowTipX","arrowTipY","dimension","baseCenterX","baseCenterY","leftX","leftY","rightX","rightY","closePath","animateRoulette","status","onFinish","animationFrameId","curSpeed","speed","getTotalRotation","animate","calculateSpeed","options","rouletteResult","getResultName","checkDegree","abs","normalizedRotation","directionResolvedData","reverse","currentAngle","item","itemAngle","requestAnimationFrame","cancelAnimationFrame","DirectForm","t","useTranslation","enqueueSnackbar","useSnackbar","onStart","onStop","result","useMiddleware","useRoulette","items","onSpinUp","onSpinDown","onSpinEnd","useMemo","useRef","resultRef","half","setStatus","useState","useCallback","useEffect","cancelAnimation","_jsx","Box","children","sx","mb","MarkdownContainer","styled","marginTop","Page","task","useTask","TabView","ResponsiveContainer","Card","variant","CardContent","p","_jsxs","Grid","container","spacing","xs","sm","Alert","severity","Markdown","breaks","DOMPurify","md","Form"],"sourceRoot":""}