{"version":3,"file":"static/js/8176.edf41dd7.chunk.js","mappings":"oZAWA,MAAMA,GAAgBC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,EAAY,EAAGE,YAAO,CACxCC,QAAS,OACTC,WAAY,WAGVC,GAAaL,EAAAA,EAAAA,KAAQM,IACvBC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,IACGF,EACJG,kBAAmB,CAAEC,UAAUH,EAAAA,EAAAA,KAAA,QAAMI,UAAU,8BAHpCX,EAKhB,EAAGE,YAAO,CAEZ,KAEKU,GAAYZ,EAAAA,EAAAA,KAAQM,IAAUC,EAAAA,EAAAA,KAACM,EAAAA,EAAG,CAACC,eAAa,KAAKR,KAAW,CAClES,kBAAmBC,GAAiB,kBAATA,GADbhB,EAGd,EAAGE,QAAOe,oBAAe,CACrBC,WAAYhB,EAAMiB,YAAYC,OAAO,OACrCC,qBAAsBJ,GAA4C,EAA3Bf,EAAMoB,MAAMC,aACnDC,sBAAuBP,GAA4C,EAA3Bf,EAAMoB,MAAMC,aACpD,iBAAkB,CACdE,iBAAiBC,EAAAA,EAAAA,IAAMxB,EAAMyB,QAAQC,QAAQC,KAAM,SAKzDC,EAAUA,EAAGC,OAAMC,YAEjBzB,EAAAA,EAAAA,KAAC0B,EAAAA,EAAI,CAAAvB,SACAqB,EAAKG,KAAI,CAACC,EAAKC,KACZ7B,EAAAA,EAAAA,KAAC8B,EAAAA,GAAQ,CAACC,gBAAc,EAACC,SAAO,EAAA7B,UAC5B8B,EAAAA,EAAAA,MAACC,EAAAA,EAAc,CAACC,QAASP,EAAIO,QAASC,SAAUX,IAAUG,EAAIH,MAAMtB,SAAA,EAChEH,EAAAA,EAAAA,KAACqC,EAAAA,EAAY,CAAAlC,SACRyB,EAAIU,QAETtC,EAAAA,EAAAA,KAACuC,EAAAA,EAAY,CAAClB,QAASO,EAAIY,YALGX,OA+GtD,EAjGyBY,EACrBjB,OACArB,WACAsB,YAGA,MAAM9B,GAAQ+C,EAAAA,EAAAA,KACRC,GAAeC,EAAAA,EAAAA,GAAcjD,EAAMkD,YAAYC,KAAK,OAEpDC,GAAWC,EAAAA,EAAAA,MACXC,EAAc,QACd,WAAEC,EAAU,WAAEC,EAAU,cAAEC,IAAkBC,EAAAA,EAAAA,MAE3CC,EAAUC,IAAeC,EAAAA,EAAAA,WAAS,GACnCC,GAAiBC,EAAAA,EAAAA,KAMvB,OACIzB,EAAAA,EAAAA,MAACvC,EAAAA,EAAG,CAAAS,SAAA,IACIwC,GAAgBnB,EAAKmC,OAAS,MAC9B3D,EAAAA,EAAAA,KAAC4D,EAAAA,EAAM,CACHC,IAAKJ,EAAiB,GAAK,GAC3BK,OAAQ,KACRC,cAVUC,GAAUT,EAAYS,EAAOA,SAAWJ,EAAAA,EAAOK,cAUxB9D,UAEjC8B,EAAAA,EAAAA,MAAAiC,EAAAA,SAAA,CAAA/D,SAAA,EACI8B,EAAAA,EAAAA,MAACzC,EAAa,CAAAW,SAAA,EACVH,EAAAA,EAAAA,KAACF,EAAU,CACPqE,QAAQ,aACRC,cAAc,OAEd3C,MAAOA,EACP4C,GAAI,CAAEC,SAAU,EAAGC,UAAW,SAAUpE,SAEvCqB,EAAKgD,MAAM,EAAG7B,EAAe,EAAI,IAAIhB,KAAI,CAACC,EAAKC,KAC5C7B,EAAAA,EAAAA,KAACK,EAAS,CACNK,eAtBG+C,GAAkBH,EAuBrBmB,aAAa,QACbJ,GAAI,CAAEE,UAAW,YAEb3C,GADCC,OAKhBc,GAAgBnB,EAAKmC,OAAS,GAC3B3D,EAAAA,EAAAA,KAAC0E,EAAAA,EAAU,CACPL,GAAI,CAAEM,SAAU,QAChBxC,QAASA,IAAMY,EAASI,EAAWF,IAAc9C,UAEjDH,EAAAA,EAAAA,KAAC4E,EAAAA,EAAQ,MAEb,SAER5E,EAAAA,EAAAA,KAAC6E,EAAAA,EAAO,CAACR,GAAI,CAAES,GAAI,gBAI7BnC,GAAgBnB,EAAKmC,OAAS,IAC5B1B,EAAAA,EAAAA,MAAAiC,EAAAA,SAAA,CAAA/D,SAAA,EACIH,EAAAA,EAAAA,KAAC6E,EAAAA,EAAO,KACR5C,EAAAA,EAAAA,MAAC8C,EAAAA,GAAI,CAACC,WAAS,EAAA7E,SAAA,EACXH,EAAAA,EAAAA,KAAC+E,EAAAA,GAAI,CAACE,MAAI,EAACC,GAAI,EAAE/E,UACbH,EAAAA,EAAAA,KAACuB,EAAO,CAACC,KAAMA,EAAMC,MAAOA,OAEhCzB,EAAAA,EAAAA,KAAC6E,EAAAA,EAAO,CAACM,YAAY,WAAWd,GAAI,CAAEe,GAAI,QAAUC,UAAQ,KAC5DrF,EAAAA,EAAAA,KAAC+E,EAAAA,GAAI,CAACE,MAAI,EAACC,GAAI,EAAE/E,SACZA,UAIbA,EACHwC,GAAgBnB,EAAKmC,OAAS,GAC3B1B,EAAAA,EAAAA,MAACqD,EAAAA,EAAW,CACRC,KAAMrC,EAAWD,GACjBuC,QAASA,IAAMzC,EAASK,EAAcH,GAAc,CAAEwC,SAAS,IAAQtF,SAAA,EAEvE8B,EAAAA,EAAAA,MAACyD,EAAAA,EAAW,CAACrB,GAAI,CAAEzE,QAAS,OAAQ+F,eAAgB,gBAAiBC,WAAY,UAAWzF,SAAA,EACxFH,EAAAA,EAAAA,KAACN,EAAAA,EAAG,CAAAS,SAAC,2FACLH,EAAAA,EAAAA,KAAC0E,EAAAA,EAAU,CAACvC,QAASA,IAAMY,EAASK,EAAcH,GAAc,CAAEwC,SAAS,IAASI,KAAK,QAAO1F,UAC5FH,EAAAA,EAAAA,KAAC8F,EAAAA,EAAS,UAGlB9F,EAAAA,EAAAA,KAAC6E,EAAAA,EAAO,KACR7E,EAAAA,EAAAA,KAACuB,EAAO,CAACC,KAAMA,EAAMC,MAAOA,OAEhC,OACF,C,yOCpId,MAuFA,EAvFiBsE,KAEb,MAAMC,GAAWC,EAAAA,EAAAA,MACXlD,GAAWC,EAAAA,EAAAA,OAEX,UAAEkD,EAAS,OAAEC,IAAWC,EAAAA,EAAAA,MAExBC,GAAaC,EAAAA,EAAAA,IAAc,kBAE3BC,EAAgB,CAClBC,KAAMN,EAAUM,KAChBC,WAAYP,EAAUO,cACnBC,OAAOC,OAAO,CAAC,KAAOR,EAAO,OAAQ,2BAA6B,MAGnE,gBAAES,IAAoBC,EAAAA,EAAAA,MACtBC,GAAOC,EAAAA,EAAAA,GAAQ,CACjBR,gBACAS,WAAYC,GAAQZ,EAAWa,eAAeD,GAC9CE,SAAUA,KACNP,EAAgB,8HAA0B,IAI5CQ,GAAOC,EAAAA,EAAAA,IAAQ,iBAEfC,EAAgBZ,OAAOC,OAAO,CAAC,KAAOR,EAAO,OAAQ,mBAAqB,IAGhF,OACInG,EAAAA,EAAAA,KAACuH,EAAAA,GAAO,IAAKH,EAAIjH,UACbH,EAAAA,EAAAA,KAACwH,EAAAA,EAAmB,CAACC,YAAU,EAAAtH,UAC3BH,EAAAA,EAAAA,KAAC0H,EAAAA,EAAS,CAACC,gBAAc,EAAAxH,UACrB8B,EAAAA,EAAAA,MAAC2F,EAAAA,EAAI,CACDzD,QAAQ,WACRE,GAAI,CACAC,SAAU,EACV1E,QAAS,OACTiI,cAAe,UACjB1H,SAAA,EAEFH,EAAAA,EAAAA,KAACN,EAAAA,EAAG,CAAC2E,GAAI,CACLzE,QAAS,OACTgG,WAAY,QACZD,eAAgB,QAChBmC,EAAG,CAAEC,GAAI,EAAG7C,GAAI,IAClB/E,UAEEH,EAAAA,EAAAA,KAACN,EAAAA,EAAG,CAAC2E,GAAI,CAAEC,SAAU,EAAG1E,QAAS,OAAQgG,WAAY,UAAWzF,UAG5DH,EAAAA,EAAAA,KAACN,EAAAA,EAAG,CAAC2E,GAAI,CAAEC,SAAU,GAAInE,UACrBH,EAAAA,EAAAA,KAACgI,EAAAA,EAAU,CAAC7D,QAAQ,KAAKE,GAAI,CAAE4D,WAAY,IAAKC,GAAI,GAAI/H,SAAC,sDAOrEH,EAAAA,EAAAA,KAACyC,EAAAA,EAAgB,CACbjB,KAAM2G,IAAO,CACT,CACI3F,MAAO,iCACPf,MAAO,YACPa,MAAMtC,EAAAA,EAAAA,KAACoI,EAAAA,EAAO,CAACC,UAAWC,EAAAA,GAAShG,KAAK,6CACxCiG,SAAU,QAEVpC,EAAO,OAAQ,oBAAqB,IAAKmB,KAAoB,IACnE3F,KAAI6G,IAAC,IACAA,EAAGrG,QAASA,IAAMY,EACjByF,EAAE/G,MACF,CAAEgH,MAAO,CAAEC,KAAM1C,GAAYP,SAAS,SAEzC+C,GAAKA,EAAED,WACZ9G,MAAOuE,EAAS2C,SAASxI,UAEzBH,EAAAA,EAAAA,KAAC4I,EAAAA,GAAM,CAACC,QAAS,CAAE/B,oBAO7B,C","sources":["components/ResponsiveTabBar.js","modules/core/pages/Settings/Settings.js"],"sourcesContent":["import CloseIcon from \"@mui/icons-material/CloseOutlined\";\r\nimport MenuIcon from \"@mui/icons-material/MenuOutlined\";\r\nimport { Box, DialogTitle, Divider, Grid, IconButton, List, ListItem, ListItemButton, ListItemIcon, ListItemText, Tab, Tabs, alpha, styled, useMediaQuery, useTheme } from \"@mui/material\";\r\nimport { useNavigate } from \"react-router\";\r\nimport Sticky from 'react-stickynode';\r\nimport useLocationHash from \"../utils/useLocationHash\";\r\nimport BottomSheet from \"./BottomSheet\";\r\nimport useHideOnScroll from \"../utils/useHideOnScroll\";\r\nimport { useState } from \"react\";\r\n\r\n\r\nconst TabsContainer = styled(Box)(({ theme }) => ({\r\n    display: 'flex',\r\n    background: '#fff',\r\n}))\r\n\r\nconst StyledTabs = styled((props) => (\r\n    <Tabs\r\n        {...props}\r\n        TabIndicatorProps={{ children: <span className=\"MuiTabs-indicatorSpan\" /> }}\r\n    />\r\n))(({ theme }) => ({\r\n    //\r\n}));\r\n\r\nconst StyledTab = styled((props) => <Tab disableRipple {...props} />, {\r\n    shouldForwardProp: prop => prop !== 'isUnderTabBar'\r\n})(\r\n    ({ theme, isUnderTabBar }) => ({\r\n        transition: theme.transitions.create('all'),\r\n        borderTopLeftRadius: !isUnderTabBar && theme.shape.borderRadius * 3,\r\n        borderTopRightRadius: !isUnderTabBar && theme.shape.borderRadius * 3,\r\n        '&.Mui-selected': {\r\n            backgroundColor: alpha(theme.palette.primary.main, 0.1)\r\n        },\r\n    }));\r\n\r\n\r\nconst TabList = ({ tabs, value }) => {\r\n    return (\r\n        <List>\r\n            {tabs.map((tab, index) => (\r\n                <ListItem disablePadding divider key={index}>\r\n                    <ListItemButton onClick={tab.onClick} selected={value === tab.value}>\r\n                        <ListItemIcon>\r\n                            {tab.icon}\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={tab.label} />\r\n                    </ListItemButton>\r\n                </ListItem>\r\n            ))}\r\n        </List>\r\n    )\r\n}\r\n\r\n\r\nconst ResponsiveTabBar = ({\r\n    tabs,\r\n    children,\r\n    value\r\n}) => {\r\n\r\n    const theme = useTheme()\r\n    const isResponsive = useMediaQuery(theme.breakpoints.down('sm'));\r\n\r\n    const navigate = useNavigate();\r\n    const segmentName = 'more';\r\n    const { hasSegment, addSegment, removeSegment } = useLocationHash();\r\n\r\n    const [isSticky, setIsSticky] = useState(false);\r\n    const isTabBarHidden = useHideOnScroll();\r\n\r\n    const handleStateChange = status => setIsSticky(status.status === Sticky.STATUS_FIXED);\r\n    const isNavStickedUnderTabBar = () => !isTabBarHidden && isSticky;\r\n\r\n\r\n    return (\r\n        <Box>\r\n            {!(!isResponsive && tabs.length > 10) && (\r\n                <Sticky\r\n                    top={isTabBarHidden ? 48 : 48 * 2}\r\n                    innerZ={1200}\r\n                    onStateChange={handleStateChange}\r\n                >\r\n                    <>\r\n                        <TabsContainer>\r\n                            <StyledTabs\r\n                                variant=\"scrollable\"\r\n                                scrollButtons=\"auto\"\r\n                                // allowScrollButtonsMobile\r\n                                value={value}\r\n                                sx={{ flexGrow: 1, minHeight: 'unset' }}\r\n                            >\r\n                                {tabs.slice(0, isResponsive ? 5 : 10).map((tab, index) => (\r\n                                    <StyledTab\r\n                                        isUnderTabBar={isNavStickedUnderTabBar()}\r\n                                        iconPosition=\"start\"\r\n                                        sx={{ minHeight: 'unset' }}\r\n                                        key={index}\r\n                                        {...tab}\r\n                                    />\r\n                                ))}\r\n                            </StyledTabs>\r\n                            {isResponsive && tabs.length > 5 ? (\r\n                                <IconButton\r\n                                    sx={{ minWidth: '48px' }}\r\n                                    onClick={() => navigate(addSegment(segmentName))}\r\n                                >\r\n                                    <MenuIcon />\r\n                                </IconButton>\r\n                            ) : null}\r\n                        </TabsContainer>\r\n                        <Divider sx={{ mt: '-1px' }} />\r\n                    </>\r\n                </Sticky>\r\n            )}\r\n            {!isResponsive && tabs.length > 10 ? (\r\n                <>\r\n                    <Divider />\r\n                    <Grid container>\r\n                        <Grid item sm={3}>\r\n                            <TabList tabs={tabs} value={value} />\r\n                        </Grid>\r\n                        <Divider orientation=\"vertical\" sx={{ mr: '-1px' }} flexItem />\r\n                        <Grid item sm={9}>\r\n                            {children}\r\n                        </Grid>\r\n                    </Grid>\r\n                </>\r\n            ) : children}\r\n            {isResponsive && tabs.length > 5 ? (\r\n                <BottomSheet\r\n                    open={hasSegment(segmentName)}\r\n                    onClose={() => navigate(removeSegment(segmentName), { replace: true })}\r\n                >\r\n                    <DialogTitle sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                        <Box>گزینه‌های بیشتر</Box>\r\n                        <IconButton onClick={() => navigate(removeSegment(segmentName), { replace: true })} size=\"small\">\r\n                            <CloseIcon />\r\n                        </IconButton>\r\n                    </DialogTitle>\r\n                    <Divider />\r\n                    <TabList tabs={tabs} value={value} />\r\n                </BottomSheet>\r\n            ) : null}\r\n        </Box>\r\n    )\r\n}\r\n\r\nResponsiveTabBar.propTypes = {\r\n\r\n}\r\n\r\nexport default ResponsiveTabBar;","import { Icon as Iconify } from \"@iconify/react\";\r\nimport { Box, Card, Container, SvgIcon, Typography } from \"@mui/material\";\r\nimport sortBy from \"lodash/sortBy\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { Outlet, useLocation, useNavigate } from \"react-router\";\r\n\r\nimport { useMiddleware, useTask } from \"../../../../Application\";\r\nimport { useAuth } from \"../../../../auth\";\r\nimport ResponsiveContainer from \"../../../../components/ResponsiveContainer\";\r\nimport ResponsiveTabBar from \"../../../../components/ResponsiveTabBar\";\r\nimport { TabView } from \"../../../../tabs\";\r\nimport useForm from \"../../../../utils/useForm\";\r\n\r\nconst Settings = () => {\r\n\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n\r\n    const { workspace, inject } = useAuth();\r\n\r\n    const middleware = useMiddleware('Core.Workspace');\r\n\r\n    const initialValues = {\r\n        name: workspace.name,\r\n        identifier: workspace.identifier,\r\n        ...Object.assign({}, ...(inject('Core', 'Settings.initialValues') || [])),\r\n    }\r\n\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const form = useForm({\r\n        initialValues,\r\n        handlePost: data => middleware.updateSettings(data),\r\n        onSubmit: () => {\r\n            enqueueSnackbar('تنظیمات بروزسانی گردید.');\r\n        }\r\n    })\r\n\r\n    const task = useTask('core.settings');\r\n\r\n    const injectedHooks = Object.assign({}, ...(inject('Core', 'Settings.Hooks') || []));\r\n\r\n\r\n    return (\r\n        <TabView {...task}>\r\n            <ResponsiveContainer fullHeight>\r\n                <Container disableGutters>\r\n                    <Card\r\n                        variant=\"outlined\"\r\n                        sx={{\r\n                            flexGrow: 1,\r\n                            display: 'flex',\r\n                            flexDirection: 'column'\r\n                        }}\r\n                    >\r\n                        <Box sx={{\r\n                            display: \"flex\",\r\n                            alignItems: 'start',\r\n                            justifyContent: 'start',\r\n                            p: { xs: 2, sm: 3 }\r\n                        }}\r\n                        >\r\n                            <Box sx={{ flexGrow: 1, display: 'flex', alignItems: 'center' }}>\r\n                                {/* {inject('People', 'PersonDetails.PreHeader', { person, loading, reload, params, ...injectedHooks })} */}\r\n\r\n                                <Box sx={{ flexGrow: 1 }}>\r\n                                    <Typography variant=\"h5\" sx={{ fontWeight: 600, mb: 1 }}>\r\n                                        تنظیمات\r\n                                    </Typography>\r\n                                </Box>\r\n                            </Box>\r\n                        </Box>\r\n                        \r\n                        <ResponsiveTabBar\r\n                            tabs={sortBy([\r\n                                {\r\n                                    label: 'عمومی',\r\n                                    value: `/settings`,\r\n                                    icon: <SvgIcon component={Iconify} icon=\"solar:settings-minimalistic-bold-duotone\" />,\r\n                                    priority: 100\r\n                                },\r\n                                ...(inject('Core', 'Settings.TabsList', { ...injectedHooks }) || [])\r\n                            ].map(o => ({\r\n                                ...o, onClick: () => navigate(\r\n                                    o.value,\r\n                                    { state: { prev: location }, replace: true }\r\n                                )\r\n                            })), o => o.priority)}\r\n                            value={location.pathname}\r\n                        >\r\n                            <Outlet context={{ form }} />\r\n                        </ResponsiveTabBar>\r\n                    </Card>\r\n                </Container>\r\n\r\n                {/* {inject('People', 'PersonDetails.Footer', { person, loading, reload, params, ...injectedHooks })} */}\r\n            </ResponsiveContainer>\r\n        </TabView>\r\n    )\r\n}\r\n\r\nexport default Settings;"],"names":["TabsContainer","styled","Box","theme","display","background","StyledTabs","props","_jsx","Tabs","TabIndicatorProps","children","className","StyledTab","Tab","disableRipple","shouldForwardProp","prop","isUnderTabBar","transition","transitions","create","borderTopLeftRadius","shape","borderRadius","borderTopRightRadius","backgroundColor","alpha","palette","primary","main","TabList","tabs","value","List","map","tab","index","ListItem","disablePadding","divider","_jsxs","ListItemButton","onClick","selected","ListItemIcon","icon","ListItemText","label","ResponsiveTabBar","useTheme","isResponsive","useMediaQuery","breakpoints","down","navigate","useNavigate","segmentName","hasSegment","addSegment","removeSegment","useLocationHash","isSticky","setIsSticky","useState","isTabBarHidden","useHideOnScroll","length","Sticky","top","innerZ","onStateChange","status","STATUS_FIXED","_Fragment","variant","scrollButtons","sx","flexGrow","minHeight","slice","iconPosition","IconButton","minWidth","MenuIcon","Divider","mt","Grid","container","item","sm","orientation","mr","flexItem","BottomSheet","open","onClose","replace","DialogTitle","justifyContent","alignItems","size","CloseIcon","Settings","location","useLocation","workspace","inject","useAuth","middleware","useMiddleware","initialValues","name","identifier","Object","assign","enqueueSnackbar","useSnackbar","form","useForm","handlePost","data","updateSettings","onSubmit","task","useTask","injectedHooks","TabView","ResponsiveContainer","fullHeight","Container","disableGutters","Card","flexDirection","p","xs","Typography","fontWeight","mb","sortBy","SvgIcon","component","Iconify","priority","o","state","prev","pathname","Outlet","context"],"sourceRoot":""}