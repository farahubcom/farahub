{"version":3,"file":"static/js/9111.9a6dd890.chunk.js","mappings":"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","sources":["modules/authentication/pages/Settings/Settings.js","components/ResponsiveTabBar.js"],"sourcesContent":["import { Icon as Iconify } from \"@iconify/react\";\r\nimport { Box, Card, Container, SvgIcon, Typography } from \"@mui/material\";\r\nimport sortBy from \"lodash/sortBy\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { Outlet, useLocation, useNavigate } from \"react-router\";\r\n\r\nimport { useMiddleware, useTask } from \"../../../../Application\";\r\nimport { useAuth } from \"../../../../auth\";\r\nimport ResponsiveContainer from \"../../../../components/ResponsiveContainer\";\r\nimport ResponsiveTabBar from \"../../../../components/ResponsiveTabBar\";\r\nimport { TabView } from \"../../../../tabs\";\r\nimport useForm from \"../../../../utils/useForm\";\r\n\r\n\r\nconst Settings = () => {\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n\r\n    const { user, inject } = useAuth();\r\n\r\n    const middleware = useMiddleware('Authentication.Authenticated');\r\n\r\n    const initialValues = {\r\n        firstName: user.firstName,\r\n        lastName: user.lastName,\r\n        ...Object.assign({}, ...(inject('Authentication', 'Settings.initialValues') || [])),\r\n    }\r\n\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const form = useForm({\r\n        initialValues,\r\n        handlePost: data => middleware.updateSettings(data),\r\n        onSubmit: () => {\r\n            enqueueSnackbar('تنظیمات حساب بروزسانی گردید.');\r\n        }\r\n    })\r\n\r\n    const task = useTask('Authentication.Settings');\r\n\r\n    const injectedHooks = Object.assign({}, ...(inject('Authentication', 'Settings.Hooks') || []));\r\n\r\n\r\n    return (\r\n        <TabView {...task}>\r\n            <ResponsiveContainer fullHeight>\r\n                <Container disableGutters>\r\n                    <Card\r\n                        variant=\"outlined\"\r\n                        sx={{\r\n                            flexGrow: 1,\r\n                            display: 'flex',\r\n                            flexDirection: 'column'\r\n                        }}\r\n                    >\r\n                        <Box\r\n                            sx={{\r\n                                display: \"flex\",\r\n                                alignItems: 'start',\r\n                                justifyContent: 'start',\r\n                                p: { xs: 2, sm: 3 }\r\n                            }}\r\n                        >\r\n                            <Box sx={{ flexGrow: 1, display: 'flex', alignItems: 'center' }}>\r\n                                {/* {inject('People', 'PersonDetails.PreHeader', { person, loading, reload, params, ...injectedHooks })} */}\r\n\r\n                                <Box sx={{ flexGrow: 1 }}>\r\n                                    <Typography variant=\"h5\" sx={{ fontWeight: 600, mb: 1 }}>\r\n                                        تنظیمات حساب\r\n                                    </Typography>\r\n                                </Box>\r\n                            </Box>\r\n                        </Box>\r\n\r\n                        <ResponsiveTabBar\r\n                            tabs={sortBy([\r\n                                {\r\n                                    label: 'مشخصات کاربری',\r\n                                    value: `/account/settings`,\r\n                                    icon: <SvgIcon component={Iconify} icon=\"solar:user-id-bold-duotone\" />,\r\n                                    priority: 100\r\n                                },\r\n                                {\r\n                                    label: 'امنیت',\r\n                                    value: `/account/settings/security`,\r\n                                    icon: <SvgIcon component={Iconify} icon=\"solar:folder-security-bold-duotone\" />,\r\n                                    priority: 200\r\n                                },\r\n                                ...(inject('Authentication', 'Settings.TabsList', { ...injectedHooks }) || [])\r\n                            ].map(o => ({\r\n                                ...o, onClick: () => navigate(\r\n                                    o.value,\r\n                                    { state: { prev: location }, replace: true }\r\n                                )\r\n                            })), o => o.priority)}\r\n                            value={location.pathname}\r\n                        >\r\n                            <Outlet context={{ form }}\r\n                            />\r\n                        </ResponsiveTabBar>\r\n                    </Card>\r\n                </Container>\r\n\r\n                {/* {inject('People', 'PersonDetails.Footer', { person, loading, reload, params, ...injectedHooks })} */}\r\n            </ResponsiveContainer>\r\n        </TabView>\r\n    )\r\n}\r\n\r\nexport default Settings;","import CloseIcon from \"@mui/icons-material/CloseOutlined\";\r\nimport MenuIcon from \"@mui/icons-material/MenuOutlined\";\r\nimport { Box, DialogTitle, Divider, Grid, IconButton, List, ListItem, ListItemButton, ListItemIcon, ListItemText, Tab, Tabs, alpha, styled, useMediaQuery, useTheme } from \"@mui/material\";\r\nimport { useNavigate } from \"react-router\";\r\nimport Sticky from 'react-stickynode';\r\nimport useLocationHash from \"../utils/useLocationHash\";\r\nimport BottomSheet from \"./BottomSheet\";\r\nimport useHideOnScroll from \"../utils/useHideOnScroll\";\r\nimport { useState } from \"react\";\r\n\r\n\r\nconst TabsContainer = styled(Box)(({ theme }) => ({\r\n    display: 'flex',\r\n    background: '#fff',\r\n}))\r\n\r\nconst StyledTabs = styled((props) => (\r\n    <Tabs\r\n        {...props}\r\n        TabIndicatorProps={{ children: <span className=\"MuiTabs-indicatorSpan\" /> }}\r\n    />\r\n))(({ theme }) => ({\r\n    //\r\n}));\r\n\r\nconst StyledTab = styled((props) => <Tab disableRipple {...props} />, {\r\n    shouldForwardProp: prop => prop !== 'isUnderTabBar'\r\n})(\r\n    ({ theme, isUnderTabBar }) => ({\r\n        transition: theme.transitions.create('all'),\r\n        borderTopLeftRadius: !isUnderTabBar && theme.shape.borderRadius * 3,\r\n        borderTopRightRadius: !isUnderTabBar && theme.shape.borderRadius * 3,\r\n        '&.Mui-selected': {\r\n            backgroundColor: alpha(theme.palette.primary.main, 0.1)\r\n        },\r\n    }));\r\n\r\n\r\nconst TabList = ({ tabs, value }) => {\r\n    return (\r\n        <List>\r\n            {tabs.map((tab, index) => (\r\n                <ListItem disablePadding divider key={index}>\r\n                    <ListItemButton onClick={tab.onClick} selected={value === tab.value}>\r\n                        <ListItemIcon>\r\n                            {tab.icon}\r\n                        </ListItemIcon>\r\n                        <ListItemText primary={tab.label} />\r\n                    </ListItemButton>\r\n                </ListItem>\r\n            ))}\r\n        </List>\r\n    )\r\n}\r\n\r\n\r\nconst ResponsiveTabBar = ({\r\n    tabs,\r\n    children,\r\n    value\r\n}) => {\r\n\r\n    const theme = useTheme()\r\n    const isResponsive = useMediaQuery(theme.breakpoints.down('sm'));\r\n\r\n    const navigate = useNavigate();\r\n    const segmentName = 'more';\r\n    const { hasSegment, addSegment, removeSegment } = useLocationHash();\r\n\r\n    const [isSticky, setIsSticky] = useState(false);\r\n    const isTabBarHidden = useHideOnScroll();\r\n\r\n    const handleStateChange = status => setIsSticky(status.status === Sticky.STATUS_FIXED);\r\n    const isNavStickedUnderTabBar = () => !isTabBarHidden && isSticky;\r\n\r\n\r\n    return (\r\n        <Box>\r\n            {!(!isResponsive && tabs.length > 10) && (\r\n                <Sticky\r\n                    top={isTabBarHidden ? 48 : 48 * 2}\r\n                    innerZ={1200}\r\n                    onStateChange={handleStateChange}\r\n                >\r\n                    <>\r\n                        <TabsContainer>\r\n                            <StyledTabs\r\n                                variant=\"scrollable\"\r\n                                scrollButtons=\"auto\"\r\n                                // allowScrollButtonsMobile\r\n                                value={value}\r\n                                sx={{ flexGrow: 1, minHeight: 'unset' }}\r\n                            >\r\n                                {tabs.slice(0, isResponsive ? 5 : 10).map((tab, index) => (\r\n                                    <StyledTab\r\n                                        isUnderTabBar={isNavStickedUnderTabBar()}\r\n                                        iconPosition=\"start\"\r\n                                        sx={{ minHeight: 'unset' }}\r\n                                        key={index}\r\n                                        {...tab}\r\n                                    />\r\n                                ))}\r\n                            </StyledTabs>\r\n                            {isResponsive && tabs.length > 5 ? (\r\n                                <IconButton\r\n                                    sx={{ minWidth: '48px' }}\r\n                                    onClick={() => navigate(addSegment(segmentName))}\r\n                                >\r\n                                    <MenuIcon />\r\n                                </IconButton>\r\n                            ) : null}\r\n                        </TabsContainer>\r\n                        <Divider sx={{ mt: '-1px' }} />\r\n                    </>\r\n                </Sticky>\r\n            )}\r\n            {!isResponsive && tabs.length > 10 ? (\r\n                <>\r\n                    <Divider />\r\n                    <Grid container>\r\n                        <Grid item sm={3}>\r\n                            <TabList tabs={tabs} value={value} />\r\n                        </Grid>\r\n                        <Divider orientation=\"vertical\" sx={{ mr: '-1px' }} flexItem />\r\n                        <Grid item sm={9}>\r\n                            {children}\r\n                        </Grid>\r\n                    </Grid>\r\n                </>\r\n            ) : children}\r\n            {isResponsive && tabs.length > 5 ? (\r\n                <BottomSheet\r\n                    open={hasSegment(segmentName)}\r\n                    onClose={() => navigate(removeSegment(segmentName), { replace: true })}\r\n                >\r\n                    <DialogTitle sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                        <Box>گزینه‌های بیشتر</Box>\r\n                        <IconButton onClick={() => navigate(removeSegment(segmentName), { replace: true })} size=\"small\">\r\n                            <CloseIcon />\r\n                        </IconButton>\r\n                    </DialogTitle>\r\n                    <Divider />\r\n                    <TabList tabs={tabs} value={value} />\r\n                </BottomSheet>\r\n            ) : null}\r\n        </Box>\r\n    )\r\n}\r\n\r\nResponsiveTabBar.propTypes = {\r\n\r\n}\r\n\r\nexport default ResponsiveTabBar;"],"names":["Settings","location","useLocation","navigate","useNavigate","user","inject","useAuth","middleware","useMiddleware","initialValues","firstName","lastName","Object","assign","enqueueSnackbar","useSnackbar","form","useForm","handlePost","data","updateSettings","onSubmit","task","useTask","injectedHooks","_jsx","TabView","children","ResponsiveContainer","fullHeight","Container","disableGutters","_jsxs","Card","variant","sx","flexGrow","display","flexDirection","Box","alignItems","justifyContent","p","xs","sm","Typography","fontWeight","mb","ResponsiveTabBar","tabs","sortBy","label","value","icon","SvgIcon","component","Iconify","priority","map","o","onClick","state","prev","replace","pathname","Outlet","context","TabsContainer","styled","theme","background","StyledTabs","props","Tabs","TabIndicatorProps","className","StyledTab","Tab","disableRipple","shouldForwardProp","prop","isUnderTabBar","transition","transitions","create","borderTopLeftRadius","shape","borderRadius","borderTopRightRadius","backgroundColor","alpha","palette","primary","main","TabList","List","tab","index","ListItem","disablePadding","divider","ListItemButton","selected","ListItemIcon","ListItemText","useTheme","isResponsive","useMediaQuery","breakpoints","down","segmentName","hasSegment","addSegment","removeSegment","useLocationHash","isSticky","setIsSticky","useState","isTabBarHidden","useHideOnScroll","length","Sticky","top","innerZ","onStateChange","status","STATUS_FIXED","_Fragment","scrollButtons","minHeight","slice","iconPosition","IconButton","minWidth","MenuIcon","Divider","mt","Grid","container","item","orientation","mr","flexItem","BottomSheet","open","onClose","DialogTitle","size","CloseIcon"],"sourceRoot":""}