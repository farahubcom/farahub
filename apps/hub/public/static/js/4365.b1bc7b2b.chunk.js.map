{"version":3,"file":"static/js/4365.b1bc7b2b.chunk.js","mappings":"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","sources":["modules/tasks/components/BoardFormDialog.js","modules/tasks/components/BoardSingle.js","modules/tasks/components/BoardView.js","modules/tasks/pages/Boards/Boards.js"],"sourcesContent":["import CloseIcon from \"@mui/icons-material/CloseOutlined\";\r\nimport SaveIcon from \"@mui/icons-material/Save\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\nimport {\r\n    Box, DialogActions,\r\n    DialogTitle,\r\n    Divider,\r\n    IconButton\r\n} from \"@mui/material\";\r\nimport { useEffect } from \"react\";\r\nimport { useMiddleware } from \"../../../Application\";\r\nimport ResponsiveDialog from \"../../../components/ResponsiveDialog\";\r\nimport TextField from \"../../../components/TextField\";\r\nimport useForm from \"../../../utils/useForm\";\r\n\r\n\r\nconst BoardFormDialog = ({\r\n    open,\r\n    onClose,\r\n    defaultValues = {},\r\n    onCreateOrUpdate,\r\n    requestConfig\r\n}) => {\r\n\r\n    const middleware = useMiddleware('Tasks.Boards');\r\n\r\n    const initialValues = {\r\n        name: '',\r\n        ...defaultValues\r\n    }\r\n\r\n    const {\r\n        register,\r\n        reset,\r\n        loading,\r\n        handleSubmit\r\n    } = useForm({\r\n        initialValues,\r\n        handlePost: data => middleware.createOrUpdate(data, requestConfig),\r\n        onSubmit: onCreateOrUpdate\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (open) reset(initialValues)\r\n    }, [open]);\r\n\r\n\r\n    return (\r\n        <ResponsiveDialog\r\n            open={open}\r\n            onClose={onClose}\r\n            dialogProps={{\r\n                fullWidth: true,\r\n                maxWidth: \"xs\"\r\n            }}\r\n        >\r\n            <DialogTitle sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                <Box>{defaultValues.id ? 'بروزرسانی برد' : 'ثبت برد جدید'}</Box>\r\n                <IconButton onClick={onClose} size=\"small\">\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            </DialogTitle>\r\n            <Divider />\r\n            <Box sx={{ p: 2 }}>\r\n                <TextField\r\n                    InputLabelProps={{ shrink: true }}\r\n                    fullWidth={true}\r\n                    size=\"small\"\r\n                    label=\"عنوان برد\"\r\n                    variant=\"filled\"\r\n                    required\r\n                    // autoFocus\r\n                    {...register(\"name\")}\r\n                />\r\n            </Box>\r\n            <Divider />\r\n            <DialogActions>\r\n                <LoadingButton\r\n                    loading={loading}\r\n                    loadingPosition=\"start\"\r\n                    type=\"submit\"\r\n                    variant=\"contained\"\r\n                    startIcon={<SaveIcon />}\r\n                    onClick={handleSubmit}\r\n                >\r\n                    ثبت\r\n                </LoadingButton>\r\n                <Box sx={{ flexGrow: 1 }}></Box>\r\n                {/* <Button type=\"button\" onClick={onClose}>انصراف</Button> */}\r\n            </DialogActions>\r\n        </ResponsiveDialog>\r\n    )\r\n}\r\n\r\nexport default BoardFormDialog","import EditOutlined from \"@mui/icons-material/EditOutlined\";\r\nimport { Box, IconButton, Paper, Skeleton, Typography } from \"@mui/material\";\r\nimport { useTask } from \"../../../Application\";\r\nimport Text from \"../../../components/Text\";\r\nimport useNavigateTask from \"../../../utils/useNavigateTask\";\r\n\r\n\r\nconst BoardSingle = ({\r\n    board,\r\n    loading,\r\n    readOnly,\r\n    onClickRename\r\n}) => {\r\n\r\n    const navigateTask = useNavigateTask();\r\n    const boardDetails = useTask('tasks.boardDetails');\r\n\r\n\r\n    if (loading) {\r\n        return (\r\n            <Skeleton\r\n                variant=\"rectangular\"\r\n                sx={{\r\n                    p: 2,\r\n                    width: '100%',\r\n                    aspectRatio: '16/9',\r\n                    height: '105px',\r\n                }}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Paper\r\n            variant=\"outlined\"\r\n            sx={{\r\n                aspectRatio: '16/9',\r\n                p: 2,\r\n                cursor: 'pointer',\r\n                position: 'relative',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                justifyContent: 'flex-end',\r\n            }}\r\n            onClick={() => navigateTask(boardDetails(board))}\r\n        >\r\n            {!Boolean(readOnly) && (\r\n                <Box\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        right: 10,\r\n                        // width: '100%',\r\n                        top: 10,\r\n                        // height: '100%',\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        justifyContent: 'center',\r\n                        cursor: 'pointer'\r\n                    }}\r\n                >\r\n                    <IconButton\r\n                        size=\"small\"\r\n                        onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            onClickRename(board);\r\n                        }}\r\n                    >\r\n                        <EditOutlined fontSize=\"small\" />\r\n                    </IconButton>\r\n                </Box>\r\n            )}\r\n            <Typography fontWeight={700}><Text>{board.name}</Text></Typography>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default BoardSingle;","import Add from \"@mui/icons-material/Add\";\r\nimport { Box, Grid, Paper, Typography } from \"@mui/material\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { useState } from \"react\";\r\nimport { useMiddleware, useTask } from \"../../../Application\";\r\nimport useFetch from \"../../../utils/useFetch\";\r\nimport useNavigateTask from \"../../../utils/useNavigateTask\";\r\nimport BoardFormDialog from \"./BoardFormDialog\";\r\nimport BoardSingle from \"./BoardSingle\";\r\n\r\n\r\nconst BoardView = ({\r\n    readOnly,\r\n    onClickAdd,\r\n    onClickRename\r\n}) => {\r\n\r\n    const middleware = useMiddleware('Tasks.Boards');\r\n\r\n    const navigateTask = useNavigateTask();\r\n\r\n    const { data, loading, reload } = useFetch({\r\n        // deps: [params.personId],\r\n        handler: () => middleware.list(),\r\n        initialState: {\r\n            data: { person: {} },\r\n            loading: true\r\n        }\r\n    });\r\n\r\n    const { data: boards } = data;\r\n\r\n    const boardDetails = useTask('tasks.boardDetails');\r\n\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const [formDialogProps, setFormDialogProps] = useState({ open: false });\r\n    const handleCreateOrUpdate = (message) => {\r\n        enqueueSnackbar(message);\r\n        setFormDialogProps({ open: false });\r\n        reload();\r\n    }\r\n\r\n\r\n    return (\r\n        <Box>\r\n            <Grid container justifyContent=\"center\">\r\n                <Grid item xs={12} sm={8} md={8}>\r\n                    <Typography variant=\"h6\" sx={{ mb: 3 }}>بردهای میز کار</Typography>\r\n                    <Grid container spacing={2}>\r\n                        {loading && [1, 2, 3, 4, 5, 6].map(n => (\r\n                            <Grid item xs={6} sm={4} md={3} key={n}>\r\n                                <BoardSingle board={{}} loading={true} />\r\n                            </Grid>\r\n                        ))}\r\n                        {!loading && boards.map((itm, itmIdx) => (\r\n                            <Grid item xs={6} sm={4} md={3} key={itmIdx}>\r\n                                <BoardSingle\r\n                                    board={itm}\r\n                                    loading={loading}\r\n                                    readOnly={readOnly}\r\n                                    onClickRename={() => setFormDialogProps({\r\n                                        open: true,\r\n                                        defaultValues: itm,\r\n                                        onCreateOrUpdate: modified => handleCreateOrUpdate(`برد بروزرسانی گردید.`)\r\n                                    })}\r\n                                />\r\n                            </Grid>\r\n                        ))}\r\n                        {(!Boolean(readOnly) && !loading) && (\r\n                            <Grid item xs={6} sm={4} md={3}>\r\n                                <Paper\r\n                                    variant=\"outlined\"\r\n                                    sx={{ px: 3, pt: 8, pb: 2, textAlign: 'center', position: 'relative' }}\r\n                                >\r\n                                    <Typography fontWeight={700} sx={{ opacity: 0 }}>$</Typography>\r\n                                    <Box\r\n                                        sx={{\r\n                                            position: 'absolute',\r\n                                            left: 0,\r\n                                            width: '100%',\r\n                                            top: 0,\r\n                                            height: '100%',\r\n                                            display: 'flex',\r\n                                            alignItems: 'center',\r\n                                            justifyContent: 'center',\r\n                                            cursor: 'pointer'\r\n                                        }}\r\n                                        onClick={() => setFormDialogProps({\r\n                                            open: true,\r\n                                            onCreateOrUpdate: modified => handleCreateOrUpdate(`برد جدید ایجاد گردید.`)\r\n                                        })}\r\n                                    >\r\n                                        <Add fontSize=\"large\" sx={{ color: 'text.secondary' }} />\r\n                                    </Box>\r\n                                </Paper>\r\n                            </Grid>\r\n                        )}\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <BoardFormDialog\r\n                {...formDialogProps}\r\n                onClose={() => setFormDialogProps({ open: false })}\r\n            />\r\n        </Box >\r\n    )\r\n}\r\n\r\nexport default BoardView;","import { Box } from \"@mui/material\";\r\nimport BoardView from \"../../components/BoardView\";\r\n\r\n\r\nconst Boards = () => {\r\n    return (\r\n        <Box sx={{ px: 2, py: 3 }}>\r\n            <BoardView />\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Boards;"],"names":["BoardFormDialog","open","onClose","defaultValues","onCreateOrUpdate","requestConfig","middleware","useMiddleware","initialValues","name","register","reset","loading","handleSubmit","useForm","handlePost","data","createOrUpdate","onSubmit","useEffect","_jsxs","ResponsiveDialog","dialogProps","fullWidth","maxWidth","children","DialogTitle","sx","display","justifyContent","alignItems","_jsx","Box","id","IconButton","onClick","size","CloseIcon","Divider","p","TextField","InputLabelProps","shrink","label","variant","required","DialogActions","LoadingButton","loadingPosition","type","startIcon","SaveIcon","flexGrow","BoardSingle","board","readOnly","onClickRename","navigateTask","useNavigateTask","boardDetails","useTask","Skeleton","width","aspectRatio","height","Paper","cursor","position","flexDirection","Boolean","right","top","e","stopPropagation","EditOutlined","fontSize","Typography","fontWeight","Text","BoardView","onClickAdd","reload","useFetch","handler","list","initialState","person","boards","enqueueSnackbar","useSnackbar","formDialogProps","setFormDialogProps","useState","handleCreateOrUpdate","message","Grid","container","item","xs","sm","md","mb","spacing","map","n","itm","itmIdx","modified","px","pt","pb","textAlign","opacity","left","Add","color","Boards","py"],"sourceRoot":""}